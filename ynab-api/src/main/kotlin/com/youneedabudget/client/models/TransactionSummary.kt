/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: YNAB API Endpoints
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package com.youneedabudget.client.models

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass
import org.threeten.bp.LocalDate
import java.util.UUID

/**
 * @property id
 * @property date The transaction date in ISO format (e.g. 2016-12-01)
 * @property amount The transaction amount in milliunits format
 * @property memo
 * @property cleared The cleared status of the transaction
 * @property approved Whether or not the transaction is approved
 * @property flagColor The transaction flag
 * @property accountId
 * @property payeeId
 * @property categoryId
 * @property transferAccountId If a transfer transaction, the account to which it transfers
 * @property transferTransactionId If a transfer transaction, the id of transaction on the other side of the transfer
 * @property matchedTransactionId If transaction is matched, the id of the matched transaction
 * @property importId If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: &#39;YNAB:[milliunit_amount]:[iso_date]:[occurrence]&#39;.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of &#39;YNAB:-294230:2015-12-30:1&#39;.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be &#39;YNAB:-294230:2015-12-30:2&#39;.
 * @property importPayeeName If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
 * @property importPayeeNameOriginal If the transaction was imported, the original payee name as it appeared on the statement
 * @property debtTransactionType If the transaction is a debt/loan account transaction, the type of transaction
 * @property deleted Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
 */
@JsonClass(generateAdapter = true)
data class TransactionSummary(
    @Json(name = "id") @field:Json(name = "id") var id: String,
    @Json(name = "date") @field:Json(name = "date") var date: LocalDate,
    @Json(name = "amount") @field:Json(name = "amount") var amount: Long,
    @Json(name = "cleared") @field:Json(name = "cleared") var cleared: TransactionSummary.ClearedEnum,
    @Json(name = "approved") @field:Json(name = "approved") var approved: Boolean,
    @Json(name = "account_id") @field:Json(name = "account_id") var accountId: UUID,
    @Json(name = "deleted") @field:Json(name = "deleted") var deleted: Boolean,
    @Json(name = "memo") @field:Json(name = "memo") var memo: String? = null,
    @Json(name = "flag_color") @field:Json(name = "flag_color") var flagColor: TransactionSummary.FlagColorEnum? = null,
    @Json(name = "payee_id") @field:Json(name = "payee_id") var payeeId: UUID? = null,
    @Json(name = "category_id") @field:Json(name = "category_id") var categoryId: UUID? = null,
    @Json(name = "transfer_account_id") @field:Json(name = "transfer_account_id") var transferAccountId: UUID? = null,
    @Json(name = "transfer_transaction_id") @field:Json(name = "transfer_transaction_id") var transferTransactionId: String? = null,
    @Json(name = "matched_transaction_id") @field:Json(name = "matched_transaction_id") var matchedTransactionId: String? = null,
    @Json(name = "import_id") @field:Json(name = "import_id") var importId: String? = null,
    @Json(name = "import_payee_name") @field:Json(name = "import_payee_name") var importPayeeName: String? = null,
    @Json(name = "import_payee_name_original") @field:Json(name = "import_payee_name_original") var importPayeeNameOriginal: String? = null,
    @Json(name = "debt_transaction_type") @field:Json(name = "debt_transaction_type") var debtTransactionType: TransactionSummary.DebtTransactionTypeEnum? = null
) {
    /**
     * The cleared status of the transaction
     * Values: CLEARED, UNCLEARED, RECONCILED
     */
    @JsonClass(generateAdapter = false)
    enum class ClearedEnum(val value: String) {
        @Json(name = "cleared") CLEARED("cleared"),
        @Json(name = "uncleared") UNCLEARED("uncleared"),
        @Json(name = "reconciled") RECONCILED("reconciled")
    }
    /**
     * The transaction flag
     * Values: RED, ORANGE, YELLOW, GREEN, BLUE, PURPLE
     */
    @JsonClass(generateAdapter = false)
    enum class FlagColorEnum(val value: String) {
        @Json(name = "red") RED("red"),
        @Json(name = "orange") ORANGE("orange"),
        @Json(name = "yellow") YELLOW("yellow"),
        @Json(name = "green") GREEN("green"),
        @Json(name = "blue") BLUE("blue"),
        @Json(name = "purple") PURPLE("purple"),
        @Json(name = "") NONE("")
    }
    /**
     * If the transaction is a debt/loan account transaction, the type of transaction
     * Values: PAYMENT, REFUND, FEE, INTEREST, ESCROW, BALANCEDADJUSTMENT, CREDIT, CHARGE
     */
    @JsonClass(generateAdapter = false)
    enum class DebtTransactionTypeEnum(val value: String) {
        @Json(name = "payment") PAYMENT("payment"),
        @Json(name = "refund") REFUND("refund"),
        @Json(name = "fee") FEE("fee"),
        @Json(name = "interest") INTEREST("interest"),
        @Json(name = "escrow") ESCROW("escrow"),
        @Json(name = "balancedAdjustment") BALANCEDADJUSTMENT("balancedAdjustment"),
        @Json(name = "credit") CREDIT("credit"),
        @Json(name = "charge") CHARGE("charge")
    }
}
